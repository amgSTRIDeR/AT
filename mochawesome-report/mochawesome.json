{
  "stats": {
    "suites": 4,
    "tests": 28,
    "passes": 28,
    "pending": 0,
    "failures": 0,
    "start": "2023-10-02T12:11:09.208Z",
    "end": "2023-10-02T12:11:09.245Z",
    "duration": 37,
    "testsRegistered": 28,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7a063223-9ce3-4f6c-951a-dcfe6db1388d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8ee39e66-e6cc-4940-a19e-55927c8d4899",
          "title": "getEvenNumbersFromArray tests",
          "fullFile": "C:\\Users\\STRIDeR\\Desktop\\AT\\at\\test\\getEvenNumbersFromArray.spec.js",
          "file": "\\test\\getEvenNumbersFromArray.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getEvenNumbersFromArray tests\"",
              "fullTitle": "getEvenNumbersFromArray tests \"before each\" hook in \"getEvenNumbersFromArray tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "b7a9e05c-0d4a-41cc-95b1-96fddf6ba900",
              "parentUUID": "8ee39e66-e6cc-4940-a19e-55927c8d4899",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getEvenNumbersFromArray tests\"",
              "fullTitle": "getEvenNumbersFromArray tests \"after each\" hook in \"getEvenNumbersFromArray tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "75943c1f-2943-4874-b7ea-08ab96e90742",
              "parentUUID": "8ee39e66-e6cc-4940-a19e-55927c8d4899",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should return even numbers from array of numbers",
              "fullTitle": "getEvenNumbersFromArray tests Should return even numbers from array of numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.getEvenNumbersFromArray([1, 0, 55, 6, -200, 3]);\nexpect(validationResults).to.be.deep.equal([0, 6, -200]);",
              "err": {},
              "uuid": "d617125d-b0b7-44b3-a616-aa3df47aecae",
              "parentUUID": "8ee39e66-e6cc-4940-a19e-55927c8d4899",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return empty array from empty array",
              "fullTitle": "getEvenNumbersFromArray tests Should return empty array from empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.getEvenNumbersFromArray([]);\nexpect(validationResults).to.be.deep.equal([]);",
              "err": {},
              "uuid": "dc8770b5-7449-4aca-aeb8-9a1e9cb2d975",
              "parentUUID": "8ee39e66-e6cc-4940-a19e-55927c8d4899",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided an array of numbers and strings",
              "fullTitle": "getEvenNumbersFromArray tests Should throw an error when provided an array of numbers and strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.getEvenNumbersFromArray([1, 0, 55, '6', -200, '3']);\n}).to.throw('[1,0,55,6,-200,3] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "07a1d6da-1080-42a0-a8e7-e3a0abdf23e4",
              "parentUUID": "8ee39e66-e6cc-4940-a19e-55927c8d4899",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a number",
              "fullTitle": "getEvenNumbersFromArray tests Should throw an error when provided a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.getEvenNumbersFromArray(99);\n}).to.throw('[99] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "a9ae33e6-6ae5-41eb-a851-cd6433270d3b",
              "parentUUID": "8ee39e66-e6cc-4940-a19e-55927c8d4899",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a string",
              "fullTitle": "getEvenNumbersFromArray tests Should throw an error when provided a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.getEvenNumbersFromArray('some string');\n}).to.throw('[some string] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "76231eba-240e-4b9c-8c2b-cbcf8cc072c9",
              "parentUUID": "8ee39e66-e6cc-4940-a19e-55927c8d4899",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d617125d-b0b7-44b3-a616-aa3df47aecae",
            "dc8770b5-7449-4aca-aeb8-9a1e9cb2d975",
            "07a1d6da-1080-42a0-a8e7-e3a0abdf23e4",
            "a9ae33e6-6ae5-41eb-a851-cd6433270d3b",
            "76231eba-240e-4b9c-8c2b-cbcf8cc072c9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "14ab91b9-2a1a-40f3-b353-fae83f260072",
          "title": "isAllNumbers tests",
          "fullFile": "C:\\Users\\STRIDeR\\Desktop\\AT\\at\\test\\isAllNumbers.spec.js",
          "file": "\\test\\isAllNumbers.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers tests\"",
              "fullTitle": "isAllNumbers tests \"before each\" hook in \"isAllNumbers tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "5aa4c1fc-420d-41ee-8ce4-cbda234aed3c",
              "parentUUID": "14ab91b9-2a1a-40f3-b353-fae83f260072",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers tests\"",
              "fullTitle": "isAllNumbers tests \"after each\" hook in \"isAllNumbers tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "8ab8879b-d415-45b5-b4f8-1ff90316b98e",
              "parentUUID": "14ab91b9-2a1a-40f3-b353-fae83f260072",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should return true for an array of numbers",
              "fullTitle": "isAllNumbers tests Should return true for an array of numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([1, 2, 3, 0, -200, 1.12]);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "8ddc4192-90ca-4ca6-9ecf-1871924c08fd",
              "parentUUID": "14ab91b9-2a1a-40f3-b353-fae83f260072",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return false for an array of numbers and strings",
              "fullTitle": "isAllNumbers tests Should return false for an array of numbers and strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([1, '2', 3, '0', -200, 1.12]);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "d99b18a6-991b-432c-bf03-9d438f3fe6e0",
              "parentUUID": "14ab91b9-2a1a-40f3-b353-fae83f260072",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return true for an empty array <Function does not check if the array is empty, so I think in a real situation I should use false as expected>",
              "fullTitle": "isAllNumbers tests Should return true for an empty array <Function does not check if the array is empty, so I think in a real situation I should use false as expected>",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([]);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "7365a475-9ad7-4ec5-91c8-be4f8798b36d",
              "parentUUID": "14ab91b9-2a1a-40f3-b353-fae83f260072",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a number",
              "fullTitle": "isAllNumbers tests Should throw an error when provided a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isAllNumbers(99);\n}).to.throw('[99] is not an array');",
              "err": {},
              "uuid": "7217847c-8170-45c1-850c-d617b2fd8ab9",
              "parentUUID": "14ab91b9-2a1a-40f3-b353-fae83f260072",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a string",
              "fullTitle": "isAllNumbers tests Should throw an error when provided a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isAllNumbers('some string');\n}).to.throw('[some string] is not an array');",
              "err": {},
              "uuid": "0846ed7e-2c72-4189-bd4c-8486bc154220",
              "parentUUID": "14ab91b9-2a1a-40f3-b353-fae83f260072",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when execute without arguments",
              "fullTitle": "isAllNumbers tests Should throw an error when execute without arguments",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isAllNumbers();\n}).to.throw('[undefined] is not an array');",
              "err": {},
              "uuid": "40122a11-aba0-494a-b551-8f4b694893d0",
              "parentUUID": "14ab91b9-2a1a-40f3-b353-fae83f260072",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8ddc4192-90ca-4ca6-9ecf-1871924c08fd",
            "d99b18a6-991b-432c-bf03-9d438f3fe6e0",
            "7365a475-9ad7-4ec5-91c8-be4f8798b36d",
            "7217847c-8170-45c1-850c-d617b2fd8ab9",
            "0846ed7e-2c72-4189-bd4c-8486bc154220",
            "40122a11-aba0-494a-b551-8f4b694893d0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "23db5b56-20bb-4d51-84a9-a49a50d9352f",
          "title": "isAllNumbers tests",
          "fullFile": "C:\\Users\\STRIDeR\\Desktop\\AT\\at\\test\\isInteger.spec.js",
          "file": "\\test\\isInteger.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers tests\"",
              "fullTitle": "isAllNumbers tests \"before each\" hook in \"isAllNumbers tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "d6ae4c7b-9940-476f-ba83-8e893b6de29a",
              "parentUUID": "23db5b56-20bb-4d51-84a9-a49a50d9352f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers tests\"",
              "fullTitle": "isAllNumbers tests \"after each\" hook in \"isAllNumbers tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "116883fe-ce21-4de6-acf7-94d756913c40",
              "parentUUID": "23db5b56-20bb-4d51-84a9-a49a50d9352f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should return true for max safe integer integers",
              "fullTitle": "isAllNumbers tests Should return true for max safe integer integers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(Number.MAX_SAFE_INTEGER);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "f788b660-b360-4022-8b03-a6b53aa2fade",
              "parentUUID": "23db5b56-20bb-4d51-84a9-a49a50d9352f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return true for min safe integer integers",
              "fullTitle": "isAllNumbers tests Should return true for min safe integer integers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(Number.MIN_SAFE_INTEGER);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "f9ea27d0-99b1-44aa-a1e1-e8202176f73f",
              "parentUUID": "23db5b56-20bb-4d51-84a9-a49a50d9352f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return true for zero",
              "fullTitle": "isAllNumbers tests Should return true for zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(0);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "e39f5732-52ca-4d6f-99ea-3800c83720ff",
              "parentUUID": "23db5b56-20bb-4d51-84a9-a49a50d9352f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return false for a decimal",
              "fullTitle": "isAllNumbers tests Should return false for a decimal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(1.56);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "70e02c5f-1fd5-4679-aeb7-13bb2c7a711b",
              "parentUUID": "23db5b56-20bb-4d51-84a9-a49a50d9352f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a string",
              "fullTitle": "isAllNumbers tests Should throw an error when provided a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger('99');\n}).to.throw('[99] is not a number');",
              "err": {},
              "uuid": "f18285ff-0613-4975-ba45-e94e88de7f4d",
              "parentUUID": "23db5b56-20bb-4d51-84a9-a49a50d9352f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a bigInt",
              "fullTitle": "isAllNumbers tests Should throw an error when provided a bigInt",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger(123n);\n}).to.throw('[123] is not a number');",
              "err": {},
              "uuid": "2a585d9e-c50b-4e27-b422-19047ea01f5d",
              "parentUUID": "23db5b56-20bb-4d51-84a9-a49a50d9352f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided an array",
              "fullTitle": "isAllNumbers tests Should throw an error when provided an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger([1, 2, -10]);\n}).to.throw('[1,2,-10] is not a number');",
              "err": {},
              "uuid": "94cb9732-2ea8-43a4-98c6-f3266374b203",
              "parentUUID": "23db5b56-20bb-4d51-84a9-a49a50d9352f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when executed without arguments",
              "fullTitle": "isAllNumbers tests Should throw an error when executed without arguments",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger();\n}).to.throw('[undefined] is not a number');",
              "err": {},
              "uuid": "edbe78c9-645c-42a5-ba6c-86368c598aaa",
              "parentUUID": "23db5b56-20bb-4d51-84a9-a49a50d9352f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided null",
              "fullTitle": "isAllNumbers tests Should throw an error when provided null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger(null);\n}).to.throw('[null] is not a number');",
              "err": {},
              "uuid": "e15dfb00-d8d8-484b-95f8-a49f553c7043",
              "parentUUID": "23db5b56-20bb-4d51-84a9-a49a50d9352f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f788b660-b360-4022-8b03-a6b53aa2fade",
            "f9ea27d0-99b1-44aa-a1e1-e8202176f73f",
            "e39f5732-52ca-4d6f-99ea-3800c83720ff",
            "70e02c5f-1fd5-4679-aeb7-13bb2c7a711b",
            "f18285ff-0613-4975-ba45-e94e88de7f4d",
            "2a585d9e-c50b-4e27-b422-19047ea01f5d",
            "94cb9732-2ea8-43a4-98c6-f3266374b203",
            "edbe78c9-645c-42a5-ba6c-86368c598aaa",
            "e15dfb00-d8d8-484b-95f8-a49f553c7043"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c6250fce-a979-4951-99a9-fe7f94d9c6da",
          "title": "isNumberEven positive tests",
          "fullFile": "C:\\Users\\STRIDeR\\Desktop\\AT\\at\\test\\isNumberEven.spec.js",
          "file": "\\test\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"before each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "cb66ab7d-bcd7-450c-86e3-42cea68a8958",
              "parentUUID": "c6250fce-a979-4951-99a9-fe7f94d9c6da",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"after each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "c4f7cd49-9fb1-43b8-97ae-ed661c400f89",
              "parentUUID": "c6250fce-a979-4951-99a9-fe7f94d9c6da",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should return true when provided with an even number",
              "fullTitle": "isNumberEven positive tests Should return true when provided with an even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "e1fadf54-2394-4515-ab90-42577152f9f9",
              "parentUUID": "c6250fce-a979-4951-99a9-fe7f94d9c6da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return false when provided with an odd number",
              "fullTitle": "isNumberEven positive tests Should return false when provided with an odd number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(3);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "2ba45107-40b8-401c-928e-9789a261b1b9",
              "parentUUID": "c6250fce-a979-4951-99a9-fe7f94d9c6da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return false when provided with an odd number",
              "fullTitle": "isNumberEven positive tests Should return false when provided with an odd number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(-21);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "8faaa7b6-59f3-4881-91d6-b902cdabd8ac",
              "parentUUID": "c6250fce-a979-4951-99a9-fe7f94d9c6da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a string",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('4');\n}).to.throw(('[4] is not of type \"Number\" it is of type \"string\"'));",
              "err": {},
              "uuid": "8ae3f8c7-c15f-4439-9d9b-a81a52495daa",
              "parentUUID": "c6250fce-a979-4951-99a9-fe7f94d9c6da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a object",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a object",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven({});\n}).to.throw(('[[object Object]] is not of type \"Number\" it is of type \"object\"'));",
              "err": {},
              "uuid": "fae2dfe7-4c83-467b-9000-873822e75060",
              "parentUUID": "c6250fce-a979-4951-99a9-fe7f94d9c6da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a null",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(null);\n}).to.throw(('[null] is not of type \"Number\" it is of type \"object\"'));",
              "err": {},
              "uuid": "c9a11c50-fa03-4b5d-a825-07de563c5b19",
              "parentUUID": "c6250fce-a979-4951-99a9-fe7f94d9c6da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a undefined",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a undefined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(undefined);\n}).to.throw('[undefined] is not of type \"Number\" it is of type \"undefined\"');",
              "err": {},
              "uuid": "bbdd2d3b-9dca-4df9-aaf0-29bca09aaefe",
              "parentUUID": "c6250fce-a979-4951-99a9-fe7f94d9c6da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a boolean",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a boolean",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(true);\n}).to.throw('[true] is not of type \"Number\" it is of type \"boolean\"');",
              "err": {},
              "uuid": "ba0b27fb-ebab-4ede-b74d-ccf9da95663b",
              "parentUUID": "c6250fce-a979-4951-99a9-fe7f94d9c6da",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e1fadf54-2394-4515-ab90-42577152f9f9",
            "2ba45107-40b8-401c-928e-9789a261b1b9",
            "8faaa7b6-59f3-4881-91d6-b902cdabd8ac",
            "8ae3f8c7-c15f-4439-9d9b-a81a52495daa",
            "fae2dfe7-4c83-467b-9000-873822e75060",
            "c9a11c50-fa03-4b5d-a825-07de563c5b19",
            "bbdd2d3b-9dca-4df9-aaf0-29bca09aaefe",
            "ba0b27fb-ebab-4ede-b74d-ccf9da95663b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}