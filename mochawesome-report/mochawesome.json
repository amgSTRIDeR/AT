{
  "stats": {
    "suites": 2,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2023-09-30T14:38:02.571Z",
    "end": "2023-09-30T14:38:02.611Z",
    "duration": 40,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8b84d9ce-b013-4a71-aef5-4b6a02502660",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fb94e419-a474-4629-8c47-347266b23eb0",
          "title": "hetEvenNumbersFromArray tests",
          "fullFile": "C:\\Users\\STRIDeR\\Desktop\\AT\\at\\test\\getEvenNumbersFromArray.spec.js",
          "file": "\\test\\getEvenNumbersFromArray.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"hetEvenNumbersFromArray tests\"",
              "fullTitle": "hetEvenNumbersFromArray tests \"before each\" hook in \"hetEvenNumbersFromArray tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "e6ce8416-4195-4e13-9617-a12d269a6a1a",
              "parentUUID": "fb94e419-a474-4629-8c47-347266b23eb0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"hetEvenNumbersFromArray tests\"",
              "fullTitle": "hetEvenNumbersFromArray tests \"after each\" hook in \"hetEvenNumbersFromArray tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "1f14fcb9-9b6b-4010-8b22-6a8202e209aa",
              "parentUUID": "fb94e419-a474-4629-8c47-347266b23eb0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should return even numbers from array of numbers",
              "fullTitle": "hetEvenNumbersFromArray tests Should return even numbers from array of numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.getEvenNumbersFromArray([1, 0, 55, 6, -200, 3]);\nexpect(validationResults).to.be.deep.equal([0, 6, -200]);",
              "err": {},
              "uuid": "354a09ad-997a-4539-bb9e-c6b4cb2e9350",
              "parentUUID": "fb94e419-a474-4629-8c47-347266b23eb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return empty array from empty array",
              "fullTitle": "hetEvenNumbersFromArray tests Should return empty array from empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.getEvenNumbersFromArray([]);\nexpect(validationResults).to.be.deep.equal([]);",
              "err": {},
              "uuid": "dffd4736-f50a-4af3-9f4f-550335e1e2ca",
              "parentUUID": "fb94e419-a474-4629-8c47-347266b23eb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided an array of numbers and strings",
              "fullTitle": "hetEvenNumbersFromArray tests Should throw an error when provided an array of numbers and strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.getEvenNumbersFromArray([1, 0, 55, '6', -200, '3']);\n}).to.throw('[1,0,55,6,-200,3] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "70e54910-88c4-483e-bd78-579ae6e401b4",
              "parentUUID": "fb94e419-a474-4629-8c47-347266b23eb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a number",
              "fullTitle": "hetEvenNumbersFromArray tests Should throw an error when provided a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.getEvenNumbersFromArray(99);\n}).to.throw('[99] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "2d12ffc7-9300-4941-9210-737a35d9de59",
              "parentUUID": "fb94e419-a474-4629-8c47-347266b23eb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a string",
              "fullTitle": "hetEvenNumbersFromArray tests Should throw an error when provided a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.getEvenNumbersFromArray('some string');\n}).to.throw('[some string] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "56d5da44-a732-445d-a8d0-e66c32e876c3",
              "parentUUID": "fb94e419-a474-4629-8c47-347266b23eb0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "354a09ad-997a-4539-bb9e-c6b4cb2e9350",
            "dffd4736-f50a-4af3-9f4f-550335e1e2ca",
            "70e54910-88c4-483e-bd78-579ae6e401b4",
            "2d12ffc7-9300-4941-9210-737a35d9de59",
            "56d5da44-a732-445d-a8d0-e66c32e876c3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "49d87048-7363-47ad-83aa-cfe89033f246",
          "title": "isNumberEven positive tests",
          "fullFile": "C:\\Users\\STRIDeR\\Desktop\\AT\\at\\test\\isNumberEven.spec.js",
          "file": "\\test\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"before each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "ef590cc3-67e8-4bd4-a66e-974ad1732c9e",
              "parentUUID": "49d87048-7363-47ad-83aa-cfe89033f246",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"after each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "3b701f69-1e2c-41ce-884a-94b03c54cc46",
              "parentUUID": "49d87048-7363-47ad-83aa-cfe89033f246",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should return true when provided with an even number",
              "fullTitle": "isNumberEven positive tests Should return true when provided with an even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "bd19c40c-c522-45e0-874d-d6d4ddb700ba",
              "parentUUID": "49d87048-7363-47ad-83aa-cfe89033f246",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return false when provided with an odd number",
              "fullTitle": "isNumberEven positive tests Should return false when provided with an odd number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(3);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "3a2ce51c-a52b-4b53-96ee-e5d63b5e05ee",
              "parentUUID": "49d87048-7363-47ad-83aa-cfe89033f246",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return false when provided with an odd number",
              "fullTitle": "isNumberEven positive tests Should return false when provided with an odd number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(-21);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "c08d6516-54d6-4aa3-877b-c3c3ddb10a4d",
              "parentUUID": "49d87048-7363-47ad-83aa-cfe89033f246",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a string",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('4');\n}).to.throw(('[4] is not of type \"Number\" it is of type \"string\"'));",
              "err": {},
              "uuid": "f4a05bee-5458-4d8d-ae01-1714af22a183",
              "parentUUID": "49d87048-7363-47ad-83aa-cfe89033f246",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a object",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven({});\n}).to.throw(('[[object Object]] is not of type \"Number\" it is of type \"object\"'));",
              "err": {},
              "uuid": "0c7ae44d-9388-48f1-8a53-d039e884d4e7",
              "parentUUID": "49d87048-7363-47ad-83aa-cfe89033f246",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a null",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(null);\n}).to.throw(('[null] is not of type \"Number\" it is of type \"object\"'));",
              "err": {},
              "uuid": "e203c1da-f162-4af3-8333-bb990aa0784e",
              "parentUUID": "49d87048-7363-47ad-83aa-cfe89033f246",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a undefined",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(undefined);\n}).to.throw('[undefined] is not of type \"Number\" it is of type \"undefined\"');",
              "err": {},
              "uuid": "27e27822-ebea-4569-8873-d2becbf4d7f3",
              "parentUUID": "49d87048-7363-47ad-83aa-cfe89033f246",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a boolean",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(true);\n}).to.throw('[true] is not of type \"Number\" it is of type \"boolean\"');",
              "err": {},
              "uuid": "4701ca0f-7c9c-4ba8-8ea7-f1a7b1336ced",
              "parentUUID": "49d87048-7363-47ad-83aa-cfe89033f246",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bd19c40c-c522-45e0-874d-d6d4ddb700ba",
            "3a2ce51c-a52b-4b53-96ee-e5d63b5e05ee",
            "c08d6516-54d6-4aa3-877b-c3c3ddb10a4d",
            "f4a05bee-5458-4d8d-ae01-1714af22a183",
            "0c7ae44d-9388-48f1-8a53-d039e884d4e7",
            "e203c1da-f162-4af3-8333-bb990aa0784e",
            "27e27822-ebea-4569-8873-d2becbf4d7f3",
            "4701ca0f-7c9c-4ba8-8ea7-f1a7b1336ced"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}