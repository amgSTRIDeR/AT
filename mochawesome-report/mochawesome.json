{
  "stats": {
    "suites": 4,
    "tests": 28,
    "passes": 28,
    "pending": 0,
    "failures": 0,
    "start": "2023-09-30T15:07:32.457Z",
    "end": "2023-09-30T15:07:32.493Z",
    "duration": 36,
    "testsRegistered": 28,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1b53b469-a8c1-453e-9277-83fcd4f023b3",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "25704bdd-2143-4ba7-9c0e-bf95d009a28a",
          "title": "getEvenNumbersFromArray tests",
          "fullFile": "C:\\Users\\STRIDeR\\Desktop\\AT\\at\\test\\getEvenNumbersFromArray.spec.js",
          "file": "\\test\\getEvenNumbersFromArray.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getEvenNumbersFromArray tests\"",
              "fullTitle": "getEvenNumbersFromArray tests \"before each\" hook in \"getEvenNumbersFromArray tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "8797b8cd-e470-4174-8be2-e0cdd8393c76",
              "parentUUID": "25704bdd-2143-4ba7-9c0e-bf95d009a28a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getEvenNumbersFromArray tests\"",
              "fullTitle": "getEvenNumbersFromArray tests \"after each\" hook in \"getEvenNumbersFromArray tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "52bf0140-9a4d-4874-99c1-c96a44eda5ad",
              "parentUUID": "25704bdd-2143-4ba7-9c0e-bf95d009a28a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should return even numbers from array of numbers",
              "fullTitle": "getEvenNumbersFromArray tests Should return even numbers from array of numbers",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.getEvenNumbersFromArray([1, 0, 55, 6, -200, 3]);\nexpect(validationResults).to.be.deep.equal([0, 6, -200]);",
              "err": {},
              "uuid": "9f329a10-212e-4e7a-a997-0653f18d5fe0",
              "parentUUID": "25704bdd-2143-4ba7-9c0e-bf95d009a28a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return empty array from empty array",
              "fullTitle": "getEvenNumbersFromArray tests Should return empty array from empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.getEvenNumbersFromArray([]);\nexpect(validationResults).to.be.deep.equal([]);",
              "err": {},
              "uuid": "417585e0-a416-4c33-9d4c-3954ee527cde",
              "parentUUID": "25704bdd-2143-4ba7-9c0e-bf95d009a28a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided an array of numbers and strings",
              "fullTitle": "getEvenNumbersFromArray tests Should throw an error when provided an array of numbers and strings",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.getEvenNumbersFromArray([1, 0, 55, '6', -200, '3']);\n}).to.throw('[1,0,55,6,-200,3] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "c5067c51-2dbe-4c20-a62e-f7bb07603a14",
              "parentUUID": "25704bdd-2143-4ba7-9c0e-bf95d009a28a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a number",
              "fullTitle": "getEvenNumbersFromArray tests Should throw an error when provided a number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.getEvenNumbersFromArray(99);\n}).to.throw('[99] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "5c82305c-b7a7-44df-9d0c-626c2ba5f19e",
              "parentUUID": "25704bdd-2143-4ba7-9c0e-bf95d009a28a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a string",
              "fullTitle": "getEvenNumbersFromArray tests Should throw an error when provided a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.getEvenNumbersFromArray('some string');\n}).to.throw('[some string] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "32c9bc27-b167-460c-a688-f86088dd9ee1",
              "parentUUID": "25704bdd-2143-4ba7-9c0e-bf95d009a28a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9f329a10-212e-4e7a-a997-0653f18d5fe0",
            "417585e0-a416-4c33-9d4c-3954ee527cde",
            "c5067c51-2dbe-4c20-a62e-f7bb07603a14",
            "5c82305c-b7a7-44df-9d0c-626c2ba5f19e",
            "32c9bc27-b167-460c-a688-f86088dd9ee1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1b92d5c1-6148-4160-ac48-1c2a55975655",
          "title": "isAllNumbers tests",
          "fullFile": "C:\\Users\\STRIDeR\\Desktop\\AT\\at\\test\\isAllNumbers.spec.js",
          "file": "\\test\\isAllNumbers.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers tests\"",
              "fullTitle": "isAllNumbers tests \"before each\" hook in \"isAllNumbers tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "8e4cd44b-8325-4fc8-8684-9e5877e7ca10",
              "parentUUID": "1b92d5c1-6148-4160-ac48-1c2a55975655",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers tests\"",
              "fullTitle": "isAllNumbers tests \"after each\" hook in \"isAllNumbers tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "1a4a2d1d-1d04-4f7d-9dfe-54d80d1ebb61",
              "parentUUID": "1b92d5c1-6148-4160-ac48-1c2a55975655",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should return true for an array of numbers",
              "fullTitle": "isAllNumbers tests Should return true for an array of numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([1, 2, 3, 0, -200, 1.12]);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "64aaabe3-271a-4307-8036-999626ae0258",
              "parentUUID": "1b92d5c1-6148-4160-ac48-1c2a55975655",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return false for an array of numbers and strings",
              "fullTitle": "isAllNumbers tests Should return false for an array of numbers and strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([1, '2', 3, '0', -200, 1.12]);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "e3c242e7-a2e5-42e2-9f78-25f73c01de13",
              "parentUUID": "1b92d5c1-6148-4160-ac48-1c2a55975655",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return true for an empty array <Function does not check if the array is empty, so I think in a real situation I should use false as expected>",
              "fullTitle": "isAllNumbers tests Should return true for an empty array <Function does not check if the array is empty, so I think in a real situation I should use false as expected>",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([]);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "24ec1494-9252-4013-b2f7-94bff52d26a0",
              "parentUUID": "1b92d5c1-6148-4160-ac48-1c2a55975655",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a number",
              "fullTitle": "isAllNumbers tests Should throw an error when provided a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isAllNumbers(99);\n}).to.throw('[99] is not an array');",
              "err": {},
              "uuid": "dd30013a-29e0-450e-9e8c-d1f6e83fe218",
              "parentUUID": "1b92d5c1-6148-4160-ac48-1c2a55975655",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a string",
              "fullTitle": "isAllNumbers tests Should throw an error when provided a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isAllNumbers('some string');\n}).to.throw('[some string] is not an array');",
              "err": {},
              "uuid": "faa2c385-7f34-4cbd-8659-d60505ff9651",
              "parentUUID": "1b92d5c1-6148-4160-ac48-1c2a55975655",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when execute without arguments",
              "fullTitle": "isAllNumbers tests Should throw an error when execute without arguments",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isAllNumbers();\n}).to.throw('[undefined] is not an array');",
              "err": {},
              "uuid": "daa487c0-3be0-4df8-9159-8625aff0db2d",
              "parentUUID": "1b92d5c1-6148-4160-ac48-1c2a55975655",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "64aaabe3-271a-4307-8036-999626ae0258",
            "e3c242e7-a2e5-42e2-9f78-25f73c01de13",
            "24ec1494-9252-4013-b2f7-94bff52d26a0",
            "dd30013a-29e0-450e-9e8c-d1f6e83fe218",
            "faa2c385-7f34-4cbd-8659-d60505ff9651",
            "daa487c0-3be0-4df8-9159-8625aff0db2d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8ea645cb-51b4-4dc1-b399-04b1773f5b28",
          "title": "isAllNumbers tests",
          "fullFile": "C:\\Users\\STRIDeR\\Desktop\\AT\\at\\test\\isInteger.spec.js",
          "file": "\\test\\isInteger.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers tests\"",
              "fullTitle": "isAllNumbers tests \"before each\" hook in \"isAllNumbers tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "7ccd285b-5c56-4623-89da-25be8879bf37",
              "parentUUID": "8ea645cb-51b4-4dc1-b399-04b1773f5b28",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers tests\"",
              "fullTitle": "isAllNumbers tests \"after each\" hook in \"isAllNumbers tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "1eb3dd6e-86b0-488c-a686-d56ec6f61e48",
              "parentUUID": "8ea645cb-51b4-4dc1-b399-04b1773f5b28",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should return true for max safe integer integers",
              "fullTitle": "isAllNumbers tests Should return true for max safe integer integers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(Number.MAX_SAFE_INTEGER);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "7ffaede1-e58c-423a-96fe-597c893cb6b1",
              "parentUUID": "8ea645cb-51b4-4dc1-b399-04b1773f5b28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return true for min safe integer integers",
              "fullTitle": "isAllNumbers tests Should return true for min safe integer integers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(Number.MIN_SAFE_INTEGER);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "93beec80-b26f-47ad-b24c-95291afc3e75",
              "parentUUID": "8ea645cb-51b4-4dc1-b399-04b1773f5b28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return true for zero",
              "fullTitle": "isAllNumbers tests Should return true for zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(0);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "a65be1ee-86d4-40cb-8b29-cd0e115a92aa",
              "parentUUID": "8ea645cb-51b4-4dc1-b399-04b1773f5b28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return false for a decimal",
              "fullTitle": "isAllNumbers tests Should return false for a decimal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(1.56);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "6c5d9058-c11f-492d-b990-8ae86256cdf8",
              "parentUUID": "8ea645cb-51b4-4dc1-b399-04b1773f5b28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a string",
              "fullTitle": "isAllNumbers tests Should throw an error when provided a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger('99');\n}).to.throw('[99] is not a number');",
              "err": {},
              "uuid": "1380fa90-9661-4939-8c52-757f204f9e77",
              "parentUUID": "8ea645cb-51b4-4dc1-b399-04b1773f5b28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a bigInt",
              "fullTitle": "isAllNumbers tests Should throw an error when provided a bigInt",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger(123n);\n}).to.throw('[123] is not a number');",
              "err": {},
              "uuid": "0b5fef53-75c8-4807-9bfc-11c443675c8c",
              "parentUUID": "8ea645cb-51b4-4dc1-b399-04b1773f5b28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided an array",
              "fullTitle": "isAllNumbers tests Should throw an error when provided an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger([1, 2, -10]);\n}).to.throw('[1,2,-10] is not a number');",
              "err": {},
              "uuid": "9efd4e5d-55ef-47ab-9c34-59c45bba31ab",
              "parentUUID": "8ea645cb-51b4-4dc1-b399-04b1773f5b28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when executed without arguments",
              "fullTitle": "isAllNumbers tests Should throw an error when executed without arguments",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger();\n}).to.throw('[undefined] is not a number');",
              "err": {},
              "uuid": "30b43ab2-2b14-4c99-b75f-682ae6e1a395",
              "parentUUID": "8ea645cb-51b4-4dc1-b399-04b1773f5b28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided null",
              "fullTitle": "isAllNumbers tests Should throw an error when provided null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger(null);\n}).to.throw('[null] is not a number');",
              "err": {},
              "uuid": "f1c3aa56-5b3e-4175-8af8-dc95a853cc82",
              "parentUUID": "8ea645cb-51b4-4dc1-b399-04b1773f5b28",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7ffaede1-e58c-423a-96fe-597c893cb6b1",
            "93beec80-b26f-47ad-b24c-95291afc3e75",
            "a65be1ee-86d4-40cb-8b29-cd0e115a92aa",
            "6c5d9058-c11f-492d-b990-8ae86256cdf8",
            "1380fa90-9661-4939-8c52-757f204f9e77",
            "0b5fef53-75c8-4807-9bfc-11c443675c8c",
            "9efd4e5d-55ef-47ab-9c34-59c45bba31ab",
            "30b43ab2-2b14-4c99-b75f-682ae6e1a395",
            "f1c3aa56-5b3e-4175-8af8-dc95a853cc82"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "93251a89-7a0f-4d38-85fd-af0ab5e67a57",
          "title": "isNumberEven positive tests",
          "fullFile": "C:\\Users\\STRIDeR\\Desktop\\AT\\at\\test\\isNumberEven.spec.js",
          "file": "\\test\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"before each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "f6f8ac8b-763e-4a1e-83fa-9c9e9a381416",
              "parentUUID": "93251a89-7a0f-4d38-85fd-af0ab5e67a57",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"after each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "d5246c05-f0f8-4a40-8b13-c5534c6f456a",
              "parentUUID": "93251a89-7a0f-4d38-85fd-af0ab5e67a57",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should return true when provided with an even number",
              "fullTitle": "isNumberEven positive tests Should return true when provided with an even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "af9ad24c-b114-4d0d-a653-71e916097163",
              "parentUUID": "93251a89-7a0f-4d38-85fd-af0ab5e67a57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return false when provided with an odd number",
              "fullTitle": "isNumberEven positive tests Should return false when provided with an odd number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(3);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "bf94c422-3eb6-4c77-8a39-ae4448eabfe1",
              "parentUUID": "93251a89-7a0f-4d38-85fd-af0ab5e67a57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return false when provided with an odd number",
              "fullTitle": "isNumberEven positive tests Should return false when provided with an odd number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(-21);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "addace93-b946-4ca9-ba93-fa57e44a9fb3",
              "parentUUID": "93251a89-7a0f-4d38-85fd-af0ab5e67a57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a string",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('4');\n}).to.throw(('[4] is not of type \"Number\" it is of type \"string\"'));",
              "err": {},
              "uuid": "299dfa68-12d1-4cb6-b8d9-9f633a1ba486",
              "parentUUID": "93251a89-7a0f-4d38-85fd-af0ab5e67a57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a object",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven({});\n}).to.throw(('[[object Object]] is not of type \"Number\" it is of type \"object\"'));",
              "err": {},
              "uuid": "769d5554-62bb-4597-bfe4-3ab7387e4ecd",
              "parentUUID": "93251a89-7a0f-4d38-85fd-af0ab5e67a57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a null",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(null);\n}).to.throw(('[null] is not of type \"Number\" it is of type \"object\"'));",
              "err": {},
              "uuid": "aa37db24-cc3b-4b1c-b942-c70f1beed2a6",
              "parentUUID": "93251a89-7a0f-4d38-85fd-af0ab5e67a57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a undefined",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(undefined);\n}).to.throw('[undefined] is not of type \"Number\" it is of type \"undefined\"');",
              "err": {},
              "uuid": "470c6533-401c-4a09-80b3-34b3cec953fb",
              "parentUUID": "93251a89-7a0f-4d38-85fd-af0ab5e67a57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a boolean",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(true);\n}).to.throw('[true] is not of type \"Number\" it is of type \"boolean\"');",
              "err": {},
              "uuid": "6676c629-d083-4cdd-95c8-f2e19a2654f3",
              "parentUUID": "93251a89-7a0f-4d38-85fd-af0ab5e67a57",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "af9ad24c-b114-4d0d-a653-71e916097163",
            "bf94c422-3eb6-4c77-8a39-ae4448eabfe1",
            "addace93-b946-4ca9-ba93-fa57e44a9fb3",
            "299dfa68-12d1-4cb6-b8d9-9f633a1ba486",
            "769d5554-62bb-4597-bfe4-3ab7387e4ecd",
            "aa37db24-cc3b-4b1c-b942-c70f1beed2a6",
            "470c6533-401c-4a09-80b3-34b3cec953fb",
            "6676c629-d083-4cdd-95c8-f2e19a2654f3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}