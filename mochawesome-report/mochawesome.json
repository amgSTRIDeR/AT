{
  "stats": {
    "suites": 4,
    "tests": 28,
    "passes": 27,
    "pending": 0,
    "failures": 1,
    "start": "2023-10-02T12:16:57.379Z",
    "end": "2023-10-02T12:16:57.427Z",
    "duration": 48,
    "testsRegistered": 28,
    "passPercent": 96.42857142857143,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "15fdd7bc-c1ec-455a-939c-2db4c3f308f9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "779e365c-8525-4ed2-9bb4-7441ac40757e",
          "title": "getEvenNumbersFromArray tests",
          "fullFile": "C:\\Users\\STRIDeR\\Desktop\\AT\\at\\test\\getEvenNumbersFromArray.spec.js",
          "file": "\\test\\getEvenNumbersFromArray.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getEvenNumbersFromArray tests\"",
              "fullTitle": "getEvenNumbersFromArray tests \"before each\" hook in \"getEvenNumbersFromArray tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "7b26b621-d81e-4e75-9bd4-2f49c3aff8fa",
              "parentUUID": "779e365c-8525-4ed2-9bb4-7441ac40757e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getEvenNumbersFromArray tests\"",
              "fullTitle": "getEvenNumbersFromArray tests \"after each\" hook in \"getEvenNumbersFromArray tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "6a206cbd-e682-432e-8be2-14884e4fd1e1",
              "parentUUID": "779e365c-8525-4ed2-9bb4-7441ac40757e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should return even numbers from array of numbers",
              "fullTitle": "getEvenNumbersFromArray tests Should return even numbers from array of numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.getEvenNumbersFromArray([1, 0, 55, 6, -200, 3]);\nexpect(validationResults).to.be.deep.equal([0, 6, -200]);",
              "err": {},
              "uuid": "650be871-f146-4dc7-be01-35d297d5b058",
              "parentUUID": "779e365c-8525-4ed2-9bb4-7441ac40757e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return empty array from empty array",
              "fullTitle": "getEvenNumbersFromArray tests Should return empty array from empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.getEvenNumbersFromArray([]);\nexpect(validationResults).to.be.deep.equal([]);",
              "err": {},
              "uuid": "f138715b-c70b-4b85-8e2c-e6196ec72048",
              "parentUUID": "779e365c-8525-4ed2-9bb4-7441ac40757e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided an array of numbers and strings",
              "fullTitle": "getEvenNumbersFromArray tests Should throw an error when provided an array of numbers and strings",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.getEvenNumbersFromArray([1, 0, 55, '6', -200, '3']);\n}).to.throw('[1,0,55,6,-200,3] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "0e740f23-5828-4aeb-90d4-a160db5aa75e",
              "parentUUID": "779e365c-8525-4ed2-9bb4-7441ac40757e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a number",
              "fullTitle": "getEvenNumbersFromArray tests Should throw an error when provided a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.getEvenNumbersFromArray(99);\n}).to.throw('[99] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "fecb773e-1ee7-433c-9d3f-0826c0066df7",
              "parentUUID": "779e365c-8525-4ed2-9bb4-7441ac40757e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a string",
              "fullTitle": "getEvenNumbersFromArray tests Should throw an error when provided a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.getEvenNumbersFromArray('some string');\n}).to.throw('[some string] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "53e466ef-3aa2-424d-aa7b-d2e384fb8045",
              "parentUUID": "779e365c-8525-4ed2-9bb4-7441ac40757e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "650be871-f146-4dc7-be01-35d297d5b058",
            "f138715b-c70b-4b85-8e2c-e6196ec72048",
            "0e740f23-5828-4aeb-90d4-a160db5aa75e",
            "fecb773e-1ee7-433c-9d3f-0826c0066df7",
            "53e466ef-3aa2-424d-aa7b-d2e384fb8045"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "072c6723-e0a5-4cb8-a7a2-bbdc4ff6fd3c",
          "title": "isAllNumbers tests",
          "fullFile": "C:\\Users\\STRIDeR\\Desktop\\AT\\at\\test\\isAllNumbers.spec.js",
          "file": "\\test\\isAllNumbers.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers tests\"",
              "fullTitle": "isAllNumbers tests \"before each\" hook in \"isAllNumbers tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "426116a7-acec-4935-8016-0fb86e7fad60",
              "parentUUID": "072c6723-e0a5-4cb8-a7a2-bbdc4ff6fd3c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers tests\"",
              "fullTitle": "isAllNumbers tests \"after each\" hook in \"isAllNumbers tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "a54eedec-4371-4fe2-bd51-9c753727aa2e",
              "parentUUID": "072c6723-e0a5-4cb8-a7a2-bbdc4ff6fd3c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should return true for an array of numbers",
              "fullTitle": "isAllNumbers tests Should return true for an array of numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([1, 2, 3, 0, -200, 1.12]);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "f9c01d17-108c-46f9-9add-47344045985e",
              "parentUUID": "072c6723-e0a5-4cb8-a7a2-bbdc4ff6fd3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return false for an array of numbers and strings",
              "fullTitle": "isAllNumbers tests Should return false for an array of numbers and strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([1, '2', 3, '0', -200, 1.12]);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "b31c4097-3a2e-472b-b215-400db2de9242",
              "parentUUID": "072c6723-e0a5-4cb8-a7a2-bbdc4ff6fd3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return true for an empty array",
              "fullTitle": "isAllNumbers tests Should return true for an empty array",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([]);\nexpect(validationResults).to.be.equal(false);",
              "err": {
                "message": "AssertionError: expected true to equal false",
                "estack": "AssertionError: expected true to equal false\n    at Context.<anonymous> (test\\isAllNumbers.spec.js:26:37)\n    at process.processImmediate (node:internal/timers:476:21)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "97bbc3b4-7186-4f44-a3c8-811dfdc7a244",
              "parentUUID": "072c6723-e0a5-4cb8-a7a2-bbdc4ff6fd3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a number",
              "fullTitle": "isAllNumbers tests Should throw an error when provided a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isAllNumbers(99);\n}).to.throw('[99] is not an array');",
              "err": {},
              "uuid": "e14f2ef8-dbac-4a47-a15b-ccf1d853c627",
              "parentUUID": "072c6723-e0a5-4cb8-a7a2-bbdc4ff6fd3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a string",
              "fullTitle": "isAllNumbers tests Should throw an error when provided a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isAllNumbers('some string');\n}).to.throw('[some string] is not an array');",
              "err": {},
              "uuid": "8c942a99-7713-4a5e-98a9-7b337a4584b9",
              "parentUUID": "072c6723-e0a5-4cb8-a7a2-bbdc4ff6fd3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when execute without arguments",
              "fullTitle": "isAllNumbers tests Should throw an error when execute without arguments",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isAllNumbers();\n}).to.throw('[undefined] is not an array');",
              "err": {},
              "uuid": "594c19ee-f56c-4a4e-940b-7bd6ed9273da",
              "parentUUID": "072c6723-e0a5-4cb8-a7a2-bbdc4ff6fd3c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f9c01d17-108c-46f9-9add-47344045985e",
            "b31c4097-3a2e-472b-b215-400db2de9242",
            "e14f2ef8-dbac-4a47-a15b-ccf1d853c627",
            "8c942a99-7713-4a5e-98a9-7b337a4584b9",
            "594c19ee-f56c-4a4e-940b-7bd6ed9273da"
          ],
          "failures": [
            "97bbc3b4-7186-4f44-a3c8-811dfdc7a244"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fd931fae-06d2-42c3-aecc-f0c9da62dea1",
          "title": "isAllNumbers tests",
          "fullFile": "C:\\Users\\STRIDeR\\Desktop\\AT\\at\\test\\isInteger.spec.js",
          "file": "\\test\\isInteger.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers tests\"",
              "fullTitle": "isAllNumbers tests \"before each\" hook in \"isAllNumbers tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "8fa9bb03-9de4-40e6-87e5-28819fcac634",
              "parentUUID": "fd931fae-06d2-42c3-aecc-f0c9da62dea1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers tests\"",
              "fullTitle": "isAllNumbers tests \"after each\" hook in \"isAllNumbers tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "b8932e49-c68a-4766-8b7f-e44118916563",
              "parentUUID": "fd931fae-06d2-42c3-aecc-f0c9da62dea1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should return true for max safe integer integers",
              "fullTitle": "isAllNumbers tests Should return true for max safe integer integers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(Number.MAX_SAFE_INTEGER);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "e03a7f35-67a7-4d65-b313-35acbff1ca58",
              "parentUUID": "fd931fae-06d2-42c3-aecc-f0c9da62dea1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return true for min safe integer integers",
              "fullTitle": "isAllNumbers tests Should return true for min safe integer integers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(Number.MIN_SAFE_INTEGER);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "70b14d60-ae73-478e-b4f4-a359f21bda7b",
              "parentUUID": "fd931fae-06d2-42c3-aecc-f0c9da62dea1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return true for zero",
              "fullTitle": "isAllNumbers tests Should return true for zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(0);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "353de8ea-07e9-4a18-a829-fdbc967dd438",
              "parentUUID": "fd931fae-06d2-42c3-aecc-f0c9da62dea1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return false for a decimal",
              "fullTitle": "isAllNumbers tests Should return false for a decimal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(1.56);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "2575a858-a15b-463d-8af6-0cc1b361b2c4",
              "parentUUID": "fd931fae-06d2-42c3-aecc-f0c9da62dea1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a string",
              "fullTitle": "isAllNumbers tests Should throw an error when provided a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger('99');\n}).to.throw('[99] is not a number');",
              "err": {},
              "uuid": "cfc9dc6f-dd4e-4602-8d3c-174d592cdd38",
              "parentUUID": "fd931fae-06d2-42c3-aecc-f0c9da62dea1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a bigInt",
              "fullTitle": "isAllNumbers tests Should throw an error when provided a bigInt",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger(123n);\n}).to.throw('[123] is not a number');",
              "err": {},
              "uuid": "838d0703-3c61-4bd5-b084-c58d894ffc87",
              "parentUUID": "fd931fae-06d2-42c3-aecc-f0c9da62dea1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided an array",
              "fullTitle": "isAllNumbers tests Should throw an error when provided an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger([1, 2, -10]);\n}).to.throw('[1,2,-10] is not a number');",
              "err": {},
              "uuid": "37d7e06d-b224-4de9-b851-7e5d95127b76",
              "parentUUID": "fd931fae-06d2-42c3-aecc-f0c9da62dea1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when executed without arguments",
              "fullTitle": "isAllNumbers tests Should throw an error when executed without arguments",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger();\n}).to.throw('[undefined] is not a number');",
              "err": {},
              "uuid": "55aab40a-1279-4e3e-9fd7-c7e1485a80c1",
              "parentUUID": "fd931fae-06d2-42c3-aecc-f0c9da62dea1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided null",
              "fullTitle": "isAllNumbers tests Should throw an error when provided null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger(null);\n}).to.throw('[null] is not a number');",
              "err": {},
              "uuid": "2b7e1db8-c71a-4c44-a424-6914883bfd3e",
              "parentUUID": "fd931fae-06d2-42c3-aecc-f0c9da62dea1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e03a7f35-67a7-4d65-b313-35acbff1ca58",
            "70b14d60-ae73-478e-b4f4-a359f21bda7b",
            "353de8ea-07e9-4a18-a829-fdbc967dd438",
            "2575a858-a15b-463d-8af6-0cc1b361b2c4",
            "cfc9dc6f-dd4e-4602-8d3c-174d592cdd38",
            "838d0703-3c61-4bd5-b084-c58d894ffc87",
            "37d7e06d-b224-4de9-b851-7e5d95127b76",
            "55aab40a-1279-4e3e-9fd7-c7e1485a80c1",
            "2b7e1db8-c71a-4c44-a424-6914883bfd3e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "454ee72b-88d3-4380-a331-223c96f0f4ce",
          "title": "isNumberEven positive tests",
          "fullFile": "C:\\Users\\STRIDeR\\Desktop\\AT\\at\\test\\isNumberEven.spec.js",
          "file": "\\test\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"before each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "84d41331-9d15-4b49-9c5d-a2478d3357a0",
              "parentUUID": "454ee72b-88d3-4380-a331-223c96f0f4ce",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"after each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "f8002acd-f8df-4a98-9e9a-035ce40b80b5",
              "parentUUID": "454ee72b-88d3-4380-a331-223c96f0f4ce",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should return true when provided with an even number",
              "fullTitle": "isNumberEven positive tests Should return true when provided with an even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "8bef7498-bfa9-44dc-a673-0910d58dd49a",
              "parentUUID": "454ee72b-88d3-4380-a331-223c96f0f4ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return false when provided with an odd number",
              "fullTitle": "isNumberEven positive tests Should return false when provided with an odd number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(3);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "ff98639d-5767-4ebe-a6d1-8aa38cc7853f",
              "parentUUID": "454ee72b-88d3-4380-a331-223c96f0f4ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return false when provided with an odd number",
              "fullTitle": "isNumberEven positive tests Should return false when provided with an odd number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(-21);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "4d50bc92-55ce-4590-ade9-563d2734942b",
              "parentUUID": "454ee72b-88d3-4380-a331-223c96f0f4ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a string",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('4');\n}).to.throw(('[4] is not of type \"Number\" it is of type \"string\"'));",
              "err": {},
              "uuid": "917d46ee-3320-4849-85a0-aae1f017ceef",
              "parentUUID": "454ee72b-88d3-4380-a331-223c96f0f4ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a object",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven({});\n}).to.throw(('[[object Object]] is not of type \"Number\" it is of type \"object\"'));",
              "err": {},
              "uuid": "53957822-baa0-407d-b112-3301d790d70e",
              "parentUUID": "454ee72b-88d3-4380-a331-223c96f0f4ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a null",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(null);\n}).to.throw(('[null] is not of type \"Number\" it is of type \"object\"'));",
              "err": {},
              "uuid": "ec6b3c0e-3217-4e11-b563-2e6b20f0cf24",
              "parentUUID": "454ee72b-88d3-4380-a331-223c96f0f4ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a undefined",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(undefined);\n}).to.throw('[undefined] is not of type \"Number\" it is of type \"undefined\"');",
              "err": {},
              "uuid": "35b13c9e-d44d-4816-ba91-ce68fe923f29",
              "parentUUID": "454ee72b-88d3-4380-a331-223c96f0f4ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a boolean",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(true);\n}).to.throw('[true] is not of type \"Number\" it is of type \"boolean\"');",
              "err": {},
              "uuid": "6ea6fff2-b606-466c-b61d-4170898310ba",
              "parentUUID": "454ee72b-88d3-4380-a331-223c96f0f4ce",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8bef7498-bfa9-44dc-a673-0910d58dd49a",
            "ff98639d-5767-4ebe-a6d1-8aa38cc7853f",
            "4d50bc92-55ce-4590-ade9-563d2734942b",
            "917d46ee-3320-4849-85a0-aae1f017ceef",
            "53957822-baa0-407d-b112-3301d790d70e",
            "ec6b3c0e-3217-4e11-b563-2e6b20f0cf24",
            "35b13c9e-d44d-4816-ba91-ce68fe923f29",
            "6ea6fff2-b606-466c-b61d-4170898310ba"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}