{
  "stats": {
    "suites": 3,
    "tests": 19,
    "passes": 19,
    "pending": 0,
    "failures": 0,
    "start": "2023-09-30T14:54:00.811Z",
    "end": "2023-09-30T14:54:00.844Z",
    "duration": 33,
    "testsRegistered": 19,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d515494b-4cb0-458f-8ede-1d7546712f11",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3ccd68dd-137a-4bb2-acfc-eb467d240374",
          "title": "getEvenNumbersFromArray tests",
          "fullFile": "C:\\Users\\STRIDeR\\Desktop\\AT\\at\\test\\getEvenNumbersFromArray.spec.js",
          "file": "\\test\\getEvenNumbersFromArray.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getEvenNumbersFromArray tests\"",
              "fullTitle": "getEvenNumbersFromArray tests \"before each\" hook in \"getEvenNumbersFromArray tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "35c2509e-4a52-48fa-bc03-0b464cb767cd",
              "parentUUID": "3ccd68dd-137a-4bb2-acfc-eb467d240374",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getEvenNumbersFromArray tests\"",
              "fullTitle": "getEvenNumbersFromArray tests \"after each\" hook in \"getEvenNumbersFromArray tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "5a1a5bd8-b73c-482e-aa2c-7125a83a9a25",
              "parentUUID": "3ccd68dd-137a-4bb2-acfc-eb467d240374",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should return even numbers from array of numbers",
              "fullTitle": "getEvenNumbersFromArray tests Should return even numbers from array of numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.getEvenNumbersFromArray([1, 0, 55, 6, -200, 3]);\nexpect(validationResults).to.be.deep.equal([0, 6, -200]);",
              "err": {},
              "uuid": "5258e175-4aef-4109-9895-a4e4e96966a1",
              "parentUUID": "3ccd68dd-137a-4bb2-acfc-eb467d240374",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return empty array from empty array",
              "fullTitle": "getEvenNumbersFromArray tests Should return empty array from empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.getEvenNumbersFromArray([]);\nexpect(validationResults).to.be.deep.equal([]);",
              "err": {},
              "uuid": "ca73a827-d517-4c39-a60b-9050ab3b9920",
              "parentUUID": "3ccd68dd-137a-4bb2-acfc-eb467d240374",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided an array of numbers and strings",
              "fullTitle": "getEvenNumbersFromArray tests Should throw an error when provided an array of numbers and strings",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.getEvenNumbersFromArray([1, 0, 55, '6', -200, '3']);\n}).to.throw('[1,0,55,6,-200,3] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "09a54efd-65d2-4e33-923b-7381db40240a",
              "parentUUID": "3ccd68dd-137a-4bb2-acfc-eb467d240374",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a number",
              "fullTitle": "getEvenNumbersFromArray tests Should throw an error when provided a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.getEvenNumbersFromArray(99);\n}).to.throw('[99] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "667c86d9-5382-4f52-bc88-297835686384",
              "parentUUID": "3ccd68dd-137a-4bb2-acfc-eb467d240374",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a string",
              "fullTitle": "getEvenNumbersFromArray tests Should throw an error when provided a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.getEvenNumbersFromArray('some string');\n}).to.throw('[some string] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "faeea56f-b07e-42b7-adc7-d3e61a45013f",
              "parentUUID": "3ccd68dd-137a-4bb2-acfc-eb467d240374",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5258e175-4aef-4109-9895-a4e4e96966a1",
            "ca73a827-d517-4c39-a60b-9050ab3b9920",
            "09a54efd-65d2-4e33-923b-7381db40240a",
            "667c86d9-5382-4f52-bc88-297835686384",
            "faeea56f-b07e-42b7-adc7-d3e61a45013f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c9670f11-5d01-4239-bde8-7be1a7db1f79",
          "title": "isAllNumbers tests",
          "fullFile": "C:\\Users\\STRIDeR\\Desktop\\AT\\at\\test\\isAllNumbers.spec.js",
          "file": "\\test\\isAllNumbers.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers tests\"",
              "fullTitle": "isAllNumbers tests \"before each\" hook in \"isAllNumbers tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "8710ff60-a358-4017-b1e7-b2bf8c03a7a0",
              "parentUUID": "c9670f11-5d01-4239-bde8-7be1a7db1f79",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers tests\"",
              "fullTitle": "isAllNumbers tests \"after each\" hook in \"isAllNumbers tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "c84fc001-9868-4d35-a799-de2d54c527c9",
              "parentUUID": "c9670f11-5d01-4239-bde8-7be1a7db1f79",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should return true for an array of numbers",
              "fullTitle": "isAllNumbers tests Should return true for an array of numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([1, 2, 3, 0, -200, 1.12]);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "fa6d83b7-4ec6-4f3d-bebe-c2a233dc56bf",
              "parentUUID": "c9670f11-5d01-4239-bde8-7be1a7db1f79",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return false for an array of numbers and strings",
              "fullTitle": "isAllNumbers tests Should return false for an array of numbers and strings",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([1, '2', 3, '0', -200, 1.12]);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "7f3f7e8a-e4f1-4761-8e4c-90f807341d8c",
              "parentUUID": "c9670f11-5d01-4239-bde8-7be1a7db1f79",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return true for an empty array <Function does not check if the array is empty, so I think in a real situation I should use false as expected>",
              "fullTitle": "isAllNumbers tests Should return true for an empty array <Function does not check if the array is empty, so I think in a real situation I should use false as expected>",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([]);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "a9c4d750-1b7b-42cb-a9ed-1ac4219f65c6",
              "parentUUID": "c9670f11-5d01-4239-bde8-7be1a7db1f79",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a number",
              "fullTitle": "isAllNumbers tests Should throw an error when provided a number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.getEvenNumbersFromArray(99);\n}).to.throw('[99] is not an array');",
              "err": {},
              "uuid": "9e2091d9-8328-419f-bac7-8b7db3035c4d",
              "parentUUID": "c9670f11-5d01-4239-bde8-7be1a7db1f79",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a string",
              "fullTitle": "isAllNumbers tests Should throw an error when provided a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.getEvenNumbersFromArray('some string');\n}).to.throw('[some string] is not an array');",
              "err": {},
              "uuid": "01db0a69-5545-4280-bf59-901db02f7583",
              "parentUUID": "c9670f11-5d01-4239-bde8-7be1a7db1f79",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when execute without arguments",
              "fullTitle": "isAllNumbers tests Should throw an error when execute without arguments",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.getEvenNumbersFromArray();\n}).to.throw('[undefined] is not an array');",
              "err": {},
              "uuid": "d7a4847f-4a16-4a95-bfdc-e96f4a6722f2",
              "parentUUID": "c9670f11-5d01-4239-bde8-7be1a7db1f79",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fa6d83b7-4ec6-4f3d-bebe-c2a233dc56bf",
            "7f3f7e8a-e4f1-4761-8e4c-90f807341d8c",
            "a9c4d750-1b7b-42cb-a9ed-1ac4219f65c6",
            "9e2091d9-8328-419f-bac7-8b7db3035c4d",
            "01db0a69-5545-4280-bf59-901db02f7583",
            "d7a4847f-4a16-4a95-bfdc-e96f4a6722f2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fcfa64b9-855d-49ec-ab18-c3693b2fc262",
          "title": "isNumberEven positive tests",
          "fullFile": "C:\\Users\\STRIDeR\\Desktop\\AT\\at\\test\\isNumberEven.spec.js",
          "file": "\\test\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"before each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "541647aa-40f9-4ec1-9c15-21bd53da6df6",
              "parentUUID": "fcfa64b9-855d-49ec-ab18-c3693b2fc262",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"after each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "90ab0e1f-ebac-4b75-953c-c2482788c2df",
              "parentUUID": "fcfa64b9-855d-49ec-ab18-c3693b2fc262",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should return true when provided with an even number",
              "fullTitle": "isNumberEven positive tests Should return true when provided with an even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "140c3c69-67bb-4986-86b2-c12f8df8006f",
              "parentUUID": "fcfa64b9-855d-49ec-ab18-c3693b2fc262",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return false when provided with an odd number",
              "fullTitle": "isNumberEven positive tests Should return false when provided with an odd number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(3);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "9bb45ba3-e76b-430c-aa2b-798d72120d20",
              "parentUUID": "fcfa64b9-855d-49ec-ab18-c3693b2fc262",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return false when provided with an odd number",
              "fullTitle": "isNumberEven positive tests Should return false when provided with an odd number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(-21);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "b0066351-b87a-47b4-844e-77d178a9c829",
              "parentUUID": "fcfa64b9-855d-49ec-ab18-c3693b2fc262",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a string",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('4');\n}).to.throw(('[4] is not of type \"Number\" it is of type \"string\"'));",
              "err": {},
              "uuid": "d1013d9d-2198-49fe-bf38-070101a2ac41",
              "parentUUID": "fcfa64b9-855d-49ec-ab18-c3693b2fc262",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a object",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven({});\n}).to.throw(('[[object Object]] is not of type \"Number\" it is of type \"object\"'));",
              "err": {},
              "uuid": "77d51280-8f0c-433f-a9ea-e4dd539cc4fc",
              "parentUUID": "fcfa64b9-855d-49ec-ab18-c3693b2fc262",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a null",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(null);\n}).to.throw(('[null] is not of type \"Number\" it is of type \"object\"'));",
              "err": {},
              "uuid": "92532be5-e572-4db5-a862-7a571033ded0",
              "parentUUID": "fcfa64b9-855d-49ec-ab18-c3693b2fc262",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a undefined",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a undefined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(undefined);\n}).to.throw('[undefined] is not of type \"Number\" it is of type \"undefined\"');",
              "err": {},
              "uuid": "874dcd23-2118-4a8d-add8-059202f4f2d9",
              "parentUUID": "fcfa64b9-855d-49ec-ab18-c3693b2fc262",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided a boolean",
              "fullTitle": "isNumberEven positive tests Should throw an error when provided a boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(true);\n}).to.throw('[true] is not of type \"Number\" it is of type \"boolean\"');",
              "err": {},
              "uuid": "27a7daa2-e543-4ecb-9db4-a80495f2bf06",
              "parentUUID": "fcfa64b9-855d-49ec-ab18-c3693b2fc262",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "140c3c69-67bb-4986-86b2-c12f8df8006f",
            "9bb45ba3-e76b-430c-aa2b-798d72120d20",
            "b0066351-b87a-47b4-844e-77d178a9c829",
            "d1013d9d-2198-49fe-bf38-070101a2ac41",
            "77d51280-8f0c-433f-a9ea-e4dd539cc4fc",
            "92532be5-e572-4db5-a862-7a571033ded0",
            "874dcd23-2118-4a8d-add8-059202f4f2d9",
            "27a7daa2-e543-4ecb-9db4-a80495f2bf06"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}